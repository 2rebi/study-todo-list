{"version":3,"sources":["components/Form.tsx","components/Item.tsx","lib/api/apiClient.ts","App.tsx","lib/api/todo.ts","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["InputForm","addTodo","inputRef","useRef","handleAddTodo","useCallback","todo","length","handleSubmit","event","preventDefault","current","value","onSubmit","w","ref","placeholder","type","colorScheme","aria-label","icon","Add","TodoItem","onDelete","onChangeComplete","checked","Boolean","completeAt","m","align","isChecked","onChange","target","as","onClick","textAlign","undefined","color","content","Delete","location","window","apiClient","axios","create","baseURL","protocol","host","App","useState","items","setItems","refresh","get","then","data","useEffect","handleAddItem","post","createTodo","handleDeleteItem","id","delete","deleteTodo","handleChangeComplete","isComplete","patch","changeCompleteTodo","console","log","theme","h","borderWidth","borderRadius","p","divider","borderColor","overflow","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e530519.chunk.js","sourcesContent":["import { HStack, Input, IconButton } from \"@chakra-ui/react\";\nimport { AddIcon } from '@chakra-ui/icons'\nimport React, {FormEvent, useCallback, useRef} from \"react\";\n\ntype Props = {\n    addTodo: (todo: string) => void;\n};\n\nexport default function InputForm({ addTodo }: Props) {\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const handleAddTodo = useCallback((todo: string) => {\n        if (todo.length === 0) return;\n        addTodo(todo);\n    }, [addTodo]);\n\n    const handleSubmit = useCallback((event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if (inputRef.current === null) return;\n        handleAddTodo(inputRef.current.value);\n        inputRef.current.value = \"\";\n    }, [handleAddTodo]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <HStack w=\"100%\">\n                <Input\n                    ref={inputRef}\n                    placeholder=\"해야 할일\"\n                />\n                <IconButton\n                    type=\"submit\"\n                    colorScheme=\"teal\"\n                    aria-label=\"추가\"\n                    icon={<AddIcon />}\n                />\n            </HStack>\n        </form>\n    );\n}","import { Todo } from \"../models/todo\";\nimport { Box, HStack, Text, Checkbox, Spacer, IconButton } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\n\ntype Props = {\n    todo: Todo;\n    onDelete: () => void;\n    onChangeComplete: (isComplete: boolean) => void;\n};\n\nexport default function TodoItem({ todo, onDelete, onChangeComplete }: Props) {\n    const checked = Boolean(todo.completeAt);\n    return (\n        <Box\n            m={2}\n        >\n            <HStack w=\"100%\" align={\"stretch\"}>\n                <Checkbox\n                    colorScheme=\"green\"\n                    isChecked={checked}\n                    onChange={event => onChangeComplete(event.target.checked)}\n                />\n                <Box\n                    w=\"100%\"\n                    as=\"button\"\n                    onClick={() => onChangeComplete(!checked)}\n                    textAlign={\"start\"}\n                >\n                    <Text\n                        as={checked ? \"s\" : undefined}\n                        color={checked ? \"gray.300\" : \"gray.600\"}\n                    >{todo.content}</Text>\n                </Box>\n                <Spacer />\n                <IconButton\n                    colorScheme=\"gray\"\n                    aria-label=\"delete\"\n                    icon={<DeleteIcon />}\n                    onClick={onDelete}\n                />\n            </HStack>\n        </Box>\n    );\n}","import axios from \"axios\";\n\nconst { location } = window;\n\nconst apiClient = axios.create({\n    // baseURL: \"http://localhost:3001/api\",\n    baseURL: `${location.protocol}//${location.host}/api`,\n});\n\nexport default apiClient;","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  Box,\n  VStack,\n  theme,\n  Spacer,\n  StackDivider,\n} from \"@chakra-ui/react\"\n\nimport InputForm from \"./components/Form\";\nimport {useCallback, useEffect, useState} from \"react\";\nimport { Todo } from \"./models/todo\";\nimport TodoItem from \"./components/Item\";\nimport {changeCompleteTodo, createTodo, deleteTodo, fetchTodo} from \"./lib/api/todo\";\n\nexport default function App() {\n  const [items, setItems] = useState<Todo[]>([]);\n\n  const refresh = useCallback(() => {\n    fetchTodo().then(value => setItems(value.data.items));\n  }, []);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  const handleAddItem = useCallback((content: string) => {\n    createTodo(content)\n        .then(refresh);\n  }, [refresh]);\n\n  const handleDeleteItem = useCallback((id: number) => {\n    deleteTodo(id)\n        .then(refresh);\n  }, [refresh]);\n\n  const handleChangeComplete = useCallback((id: number, checked: boolean) => {\n    changeCompleteTodo(id, checked)\n        .then(refresh);\n  }, [refresh]);\n\n  const { location } = window;\n\n  console.log(location.protocol, location.host);\n\n  return (\n      <ChakraProvider theme={theme}>\n        <VStack h=\"100%\">\n          <Spacer />\n          <Box\n              borderWidth=\"1px\"\n              borderRadius=\"lg\"\n              p={\"2\"}\n          >\n            <InputForm\n                addTodo={handleAddItem}\n            />\n            <VStack\n                w=\"xl\"\n                h=\"2xl\"\n                align=\"stretch\"\n                divider={<StackDivider borderColor=\"gray.200\" />}\n                overflow=\"scroll\"\n            >\n\n              {\n                items.map((value) =>\n                    <TodoItem\n                        key={value.id}\n                        todo={value}\n                        onDelete={() => handleDeleteItem(value.id)}\n                        onChangeComplete={isComplete => handleChangeComplete(value.id, isComplete)}\n                    />)\n              }\n            </VStack>\n          </Box>\n          <Spacer />\n        </VStack>\n      </ChakraProvider>\n  );\n}","import apiClient from \"./apiClient\";\nimport {Todo} from \"../../models/todo\";\n\n\ntype FetchResponse = {\n    items: Todo[];\n}\n\nexport function fetchTodo() {\n    return apiClient.get<FetchResponse>(\"/todo\");\n}\n\nexport function createTodo(content: string) {\n    return apiClient.post(\"/todo\", {\n        content,\n    });\n}\n\nexport function changeCompleteTodo(id: number, isComplete: boolean) {\n    return apiClient.patch(`/todo/${id}`, {\n        isComplete,\n    });\n}\n\nexport function deleteTodo(id: number) {\n    return apiClient.delete(`/todo/${id}`)\n}","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}